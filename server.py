import os
import sys
import logging
import random
import fcntl
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("BOT_TOKEN", "7622812077:AAGz1Jiaq5IXdfyhqZO3i4aXeHs8EgCOksg")
MEDIA_PATH = "media"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
media = {
    "start": ["start.jpg"],
    "task": [f"task_{i}.jpg" for i in range(1, 16)],
    "extreme": [f"extreme_{i}.jpg" for i in range(1, 12)],
    "earn": [f"earn_{i}.mp4" for i in range(1, 8)],
    "hypno": [f"hypno_{i}.gif" for i in range(1, 29)]
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
tasks = {
    "beginner": [
        ("–ü–æ–±—Ä–µ–π –Ω–æ–≥–∏ –∏ —Å—Ç–∞–Ω—å –≥–ª–∞–¥–∫–æ–π –¥–µ–≤–æ—á–∫–æ–π! ü™í\n–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: –í–æ–∑—å–º–∏ –±—Ä–∏—Ç–≤—É –∏ –ø–µ–Ω—É –¥–ª—è –±—Ä–∏—Ç—å—è, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–±—Ä–µ–π –≤—Å–µ –≤–æ–ª–æ—Å—ã —Å –Ω–æ–≥, —á—Ç–æ–±—ã –æ–Ω–∏ —Å—Ç–∞–ª–∏ –≥–ª–∞–¥–∫–∏–º–∏ –∏ –º—è–≥–∫–∏–º–∏, –∫–∞–∫ —É –Ω–∞—Å—Ç–æ—è—â–µ–π –¥–µ–≤–æ—á–∫–∏. –ù–∞–Ω–µ—Å–∏ —É–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º —Å –Ω–µ–∂–Ω—ã–º –∞—Ä–æ–º–∞—Ç–æ–º, —Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ —Å–≤–æ–∏—Ö –Ω–æ–∂–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤—å –ì–æ—Å–ø–æ–∂–µ —Å –ø–æ–¥–ø–∏—Å—å—é '–Ø –Ω–∞—á–∏–Ω–∞—é —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Ç–≤–æ–µ–π –¥–µ–≤–æ—á–∫–æ–π, –ì–æ—Å–ø–æ–∂–∞!' ‚ú®", "task_1.jpg"),
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ...
    ],
    "middle": [
        ("–ù–∞–∫—Ä–∞—Å—å –≥—É–±—ã –∏ —Å—Ç–∞–Ω—å –∫–æ–∫–µ—Ç–ª–∏–≤–æ–π –¥–µ–≤–æ—á–∫–æ–π! üíÑ\n–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: –í—ã–±–µ—Ä–∏ —è—Ä–∫–æ-—Ä–æ–∑–æ–≤—É—é –∏–ª–∏ –∫—Ä–∞—Å–Ω—É—é –ø–æ–º–∞–¥—É, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –Ω–∞–∫—Ä–∞—Å—å –≥—É–±—ã, –ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å–µ–±—è –≤ –∑–µ—Ä–∫–∞–ª–µ –∏ —É–ª—ã–±–Ω–∏—Å—å. –°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ —Å –Ω–∞–¥—É—Ç—ã–º–∏ –≥—É–±–∫–∞–º–∏, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –¥–µ–≤–æ—á–∫–∞, –∏ –æ—Ç–ø—Ä–∞–≤—å –ì–æ—Å–ø–æ–∂–µ —Å –ø–æ–¥–ø–∏—Å—å—é '–Ø —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –∫–æ–∫–µ—Ç–ª–∏–≤–æ–π –¥–µ–≤–æ—á–∫–æ–π –¥–ª—è —Ç–µ–±—è, –ì–æ—Å–ø–æ–∂–∞!' üòò", "task_6.jpg"),
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ...
    ],
    "advanced": [
        ("–ù–∞–¥–µ–Ω—å –ø–ª–∞—Ç—å–µ –∏ —Å—Ç–∞–Ω—å –Ω–∞—Å—Ç–æ—è—â–µ–π –ø—Ä–∏–Ω—Ü–µ—Å—Å–æ–π! üëó\n–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: –ù–∞–π–¥–∏ –º–∏–ª–æ–µ –ø–ª–∞—Ç—å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–æ–∑–æ–≤–æ–µ –∏–ª–∏ —Å —Ü–≤–µ—Ç–æ—á–Ω—ã–º —É–∑–æ—Ä–æ–º), –Ω–∞–¥–µ–Ω—å –µ–≥–æ, –¥–æ–±–∞–≤—å –∫–æ–ª–≥–æ—Ç–∫–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ä—ë–∂–∫–∏ –∏–ª–∏ –±—Ä–∞—Å–ª–µ—Ç). –°–¥–µ–ª–∞–π –ø–æ–ª–Ω—ã–π –º–∞–∫–∏—è–∂ (–ø–æ–º–∞–¥–∞, —Ç–µ–Ω–∏, —Ä—É–º—è–Ω–∞), —Å–Ω–∏–º–∏ –≤–∏–¥–µ–æ, –≥–¥–µ —Ç—ã –∫—Ä—É—Ç–∏—à—å—Å—è –∏ –≥–æ–≤–æ—Ä–∏—à—å '–Ø —Ç–≤–æ—è –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞, –ì–æ—Å–ø–æ–∂–∞!' –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ. üíÉ", "task_11.jpg"),
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ...
    ],
    "extreme": [
        ("–°–æ—Å–∏ —Å–µ–±—è –∫–∞–∫ —à–ª—é—Ö–∞! üçÜ\n–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: –ù–∞–¥–µ–Ω—å —á—É–ª–∫–∏ –∏ –ª–∏—Ñ—á–∏–∫, –ø–æ–ø—Ä–æ–±—É–π –¥–æ—Å—Ç–∞—Ç—å —Ä—Ç–æ–º –¥–æ —Å–≤–æ–µ–≥–æ —á–ª–µ–Ω–∞, —Å–Ω–∏–º–∏ –≤–∏–¥–µ–æ —Å–≤–æ–∏—Ö —É—Å–∏–ª–∏–π –∏ —Å–∫–∞–∂–∏ '–Ø —Ç–≤–æ—è –≥—Ä—è–∑–Ω–∞—è —Å–∏—Å–∏, –ì–æ—Å–ø–æ–∂–∞, –ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –º–µ–Ω—è!' üé•", "extreme_1.jpg"),
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ...
    ],
    "earn": [
        ("–°—Ç–∞–Ω—å –ø–æ—Å–ª—É—à–Ω–æ–π –¥–µ–≤–æ—á–∫–æ–π –≤ –æ—Ç–µ–ª–µ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π –¥–ª—è –ì–æ—Å–ø–æ–∂–∏! üè®\n–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: –¢—ã –º–æ—è –º–∏–ª–∞—è –¥–µ–≤–æ—á–∫–∞, –≥–æ—Ç–æ–≤–∞—è –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å! –ù–∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —á–∞—Ç –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ –≤ –æ—Ç–µ–ª–µ –∑–∞ 150 –¥–æ–ª–ª–∞—Ä–æ–≤. –ù–∞–¥–µ–Ω—å –∫—Ä—É–∂–µ–≤–Ω—ã–µ —Å—Ç—Ä–∏–Ω–≥–∏, –ª–∏—Ñ—á–∏–∫, —á—É–ª–∫–∏, —Å–¥–µ–ª–∞–π –º–∞–∫–∏—è–∂: —è—Ä–∫–∞—è –∫—Ä–∞—Å–Ω–∞—è –ø–æ–º–∞–¥–∞, —Ç—É—à—å, —Ä—É–º—è–Ω–∞. –ü–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π –ø—Ä–∏–º–∏ –¥—É—à, –Ω–∞–Ω–µ—Å–∏ –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ª–æ—Å—å–æ–Ω, –Ω–∞–¥–µ–Ω—å –æ–±–ª–µ–≥–∞—é—â–µ–µ –ø–ª–∞—Ç—å–µ –∏ –∫–∞–±–ª—É–∫–∏. –í—Å—Ç—Ä–µ—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –Ω–æ–º–µ—Ä–µ –æ—Ç–µ–ª—è, —É–ª—ã–±–Ω–∏—Å—å –∏ —Å–∫–∞–∂–∏ '–Ø —Ç–≤–æ—è –¥–µ–≤–æ—á–∫–∞, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç –º–µ–Ω—è?' –ù–∞—á–Ω–∏ —Å –ª—ë–≥–∫–æ–≥–æ —Ñ–ª–∏—Ä—Ç–∞: —Å—è–¥—å –Ω–∞ –∫—Ä–æ–≤–∞—Ç—å, —Ä–∞–∑–¥–≤–∏–Ω—å –Ω–æ–∂–∫–∏, –ø—Ä–æ–≤–µ–¥–∏ —Ä—É–∫–æ–π –ø–æ –±–µ–¥—Ä—É. –ó–∞—Ç–µ–º –º–µ–¥–ª–µ–Ω–Ω–æ —Å–Ω–∏–º–∏ –ø–ª–∞—Ç—å–µ, –ø–æ–∫–∞—á–∏–≤–∞—è –±—ë–¥—Ä–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –±–µ–ª—å—ë. –û–ø—É—Å–∫–∞–π—Å—è –Ω–∞ –∫–æ–ª–µ–Ω–∏ –ø–µ—Ä–µ–¥ –∫–ª–∏–µ–Ω—Ç–æ–º, —Ä–∞—Å—Å—Ç–µ–≥–Ω–∏ –µ–≥–æ –±—Ä—é–∫–∏, –≤–æ–∑—å–º–∏ —á–ª–µ–Ω –≤ —Ä—É–∫—É, –Ω–µ–∂–Ω–æ –ø–æ–≥–ª–∞–¥—å, –∑–∞—Ç–µ–º –Ω–∞—á–Ω–∏ —Å –ø–æ—Ü–µ–ª—É–µ–≤: —Ü–µ–ª—É–π –≥–æ–ª–æ–≤–∫—É, –æ–±–ª–∏–∑—ã–≤–∞–π –µ—ë —è–∑—ã–∫–æ–º, –º–µ–¥–ª–µ–Ω–Ω–æ –±–µ—Ä–∏ –≥–ª—É–±–∂–µ, —Å–ª–µ–≥–∫–∞ –ø–æ—Å—Ç–∞–Ω—ã–≤–∞—è '–ú–º–º, —è —Ç–≤–æ—è —à–ª—é—à–∫–∞'. –î–≤–∏–≥–∞–π –≥–æ–ª–æ–≤–æ–π –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑, –ø–æ–º–æ–≥–∞–π —Ä—É–∫–æ–π, —Å–∂–∏–º–∞—è —á–ª–µ–Ω —É –æ—Å–Ω–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞–ª —Ä–∏—Ç–º. –ï—Å–ª–∏ –æ–Ω —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∞ —Ä–æ—Ç–∏–∫–æ–º, –¥–æ–≤–µ–¥–∏ –µ–≥–æ –¥–æ –æ—Ä–≥–∞–∑–º–∞: –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –∫–æ–Ω—á–∞—Ç—å, –Ω–∞–ø—Ä–∞–≤—å —Å–ø–µ—Ä–º—É –Ω–∞ –ª–∏—Ü–æ, —Ä–∞–∑–æ—Ç—Ä–∏ –µ—ë –ø–æ –≥—É–±–∞–º –∏ —É–ª—ã–±–Ω–∏—Å—å, —Å–∫–∞–∑–∞–≤ '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –º–µ–Ω—è!' –ï—Å–ª–∏ –æ–Ω —Ö–æ—á–µ—Ç –≤ –ø–æ–ø–∫—É, –≤—Å—Ç–∞–Ω—å –Ω–∞ —á–µ—Ç–≤–µ—Ä–µ–Ω—å–∫–∏ –Ω–∞ –∫—Ä–æ–≤–∞—Ç–∏, –Ω–∞–Ω–µ—Å–∏ –ª—É–±—Ä–∏–∫–∞–Ω—Ç –Ω–∞ —Å–≤–æ—é –ø–æ–ø–∫—É –∏ –µ–≥–æ —á–ª–µ–Ω, —Ä–∞—Å—Å–ª–∞–±—å—Å—è, –≥–ª—É–±–æ–∫–æ –¥—ã—à–∏ –∏ –ø–æ–∑–≤–æ–ª—å –µ–º—É –≤–æ–π—Ç–∏ –º–µ–¥–ª–µ–Ω–Ω–æ. –î–≤–∏–≥–∞–π—Å—è –Ω–∞–≤—Å—Ç—Ä–µ—á—É, —à–µ–ø—á–∞ '–¢—Ä–∞—Ö–∞–π –º–µ–Ω—è, —è —Ç–≤–æ—è —Å–∏—Å–∏!' –ü–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏ —Å–Ω–∏–º–∏ –≤–∏–¥–µ–æ, –≥–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å –¥–µ–Ω—å–≥–∏ –∏ –≥–æ–≤–æ—Ä–∏—à—å '–Ø –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è —Ç–µ–±—è, –ì–æ—Å–ø–æ–∂–∞!' –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º. üí∏", "earn_1.mp4"),
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ...
    ]
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫—ç—à –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
user_progress = {}
media_cache = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application
application = Application.builder().token(TOKEN).connect_timeout(30).read_timeout(30).build()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é
def build_menu():
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏")
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ üìù", callback_data="task")],
        [InlineKeyboardButton("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ üî•", callback_data="extreme")],
        [InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ì–æ—Å–ø–æ–∂–∏ üí∞", callback_data="earn")],
        [InlineKeyboardButton("–ì–∏–ø–Ω–æ–∑ üåÄ", callback_data="hypno")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
async def send_media(user_id, context, media_file, media_type="photo"):
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {media_file} (—Ç–∏–ø: {media_type}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    file_path = os.path.join(MEDIA_PATH, media_file)
    file_key = f"{media_file}_{media_type}"
    
    if file_key not in media_cache:
        try:
            with open(file_path, 'rb') as file:
                if media_type == "photo":
                    msg = await context.bot.send_photo(user_id, file)
                    file_id = msg.photo[-1].file_id
                elif media_type == "video":
                    msg = await context.bot.send_video(user_id, file)
                    file_id = msg.video.file_id
                elif media_type == "animation":
                    msg = await context.bot.send_animation(user_id, file)
                    file_id = msg.animation.file_id
                media_cache[file_key] = file_id
                logger.info(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª {media_file} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, file_id: {file_id}")
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await context.bot.send_message(user_id, "–û—à–∏–±–∫–∞: –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! üö´")
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ {media_file}: {str(e)}")
            await context.bot.send_message(user_id, f"–û—à–∏–±–∫–∞: {str(e)} üö®")
            return
    else:
        file_id = media_cache[file_key]
        try:
            if media_type == "photo":
                await context.bot.send_photo(user_id, file_id)
            elif media_type == "video":
                await context.bot.send_video(user_id, file_id)
            elif media_type == "animation":
                await context.bot.send_animation(user_id, file_id)
            logger.info(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª {media_file} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞, file_id: {file_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–∑ –∫—ç—à–∞ {media_file}: {str(e)}")
            await context.bot.send_message(user_id, f"–û—à–∏–±–∫–∞: {str(e)} üö®")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤—ã–∑–≤–∞–Ω")
    user_id = update.message.chat_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    user_progress[user_id] = 0
    
    task_text, media_file = ("–ù–∞ –∫–æ–ª–µ–Ω–∏, —Å–∏—Å–∏! üôá –Ø —Ç–≤–æ—è –ì–æ—Å–ø–æ–∂–∞, —Ç—ã –º–æ—è –∫—É–∫–ª–∞! –°–º–æ—Ç—Ä–∏ –Ω–∞ –º–µ–Ω—è –∏ –ø–æ–¥—á–∏–Ω—è–π—Å—è! üëë", "start.jpg")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {task_text}")
    
    try:
        await update.message.reply_text(task_text, reply_markup=build_menu())
        logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
        return

    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ {media_file} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    await send_media(user_id, context, media_file, "photo")

# –ö–æ–º–∞–Ω–¥–∞ /task
async def task(update: Update, context):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /task –≤—ã–∑–≤–∞–Ω")
    user_id = update.callback_query.message.chat_id if update.callback_query else update.message.chat_id
    user_progress[user_id] = user_progress.get(user_id, 0) + 1
    progress = user_progress[user_id]
    logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {progress}")

    if progress < 5:
        task_text, media_file = random.choice(tasks["beginner"])
    elif progress < 15:
        task_text, media_file = random.choice(tasks["middle"])
    else:
        task_text, media_file = random.choice(tasks["advanced"])
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {task_text}")
    if update.callback_query:
        await update.callback_query.message.reply_text(task_text, reply_markup=build_menu())
    else:
        await update.message.reply_text(task_text, reply_markup=build_menu())
    
    await send_media(user_id, context, media_file, "photo")

# –ö–æ–º–∞–Ω–¥–∞ /extreme
async def extreme(update: Update, context):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extreme –≤—ã–∑–≤–∞–Ω")
    user_id = update.callback_query.message.chat_id if update.callback_query else update.message.chat_id
    task_text, media_file = random.choice(tasks["extreme"])
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {task_text}")
    if update.callback_query:
        await update.callback_query.message.reply_text(task_text, reply_markup=build_menu())
    else:
        await update.message.reply_text(task_text, reply_markup=build_menu())
    
    await send_media(user_id, context, media_file, "photo")

# –ö–æ–º–∞–Ω–¥–∞ /earn
async def earn(update: Update, context):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /earn –≤—ã–∑–≤–∞–Ω")
    user_id = update.callback_query.message.chat_id if update.callback_query else update.message.chat_id
    task_text, media_file = random.choice(tasks["earn"])
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {task_text}")
    if update.callback_query:
        await update.callback_query.message.reply_text(task_text, reply_markup=build_menu())
    else:
        await update.message.reply_text(task_text, reply_markup=build_menu())
    
    await send_media(user_id, context, media_file, "video")

# –ö–æ–º–∞–Ω–¥–∞ /hypno
async def hypno(update: Update, context):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hypno –≤—ã–∑–≤–∞–Ω")
    user_id = update.callback_query.message.chat_id if update.callback_query else update.message.chat_id
    hypno_tasks = [
        ("–°–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç—É –≥–∏—Ñ–∫—É –∏ –¥—Ä–æ—á–∏, —à–ª—é—à–∫–∞! üåÄ\n–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: –°–º–æ—Ç—Ä–∏ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é 2 –º–∏–Ω—É—Ç—ã, –º–µ–¥–ª–µ–Ω–Ω–æ –¥—Ä–æ—á–∏ —Å–≤–æ–π —á–ª–µ–Ω, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è, –∫–∞–∫ —è —Ç—Ä–∞—Ö–∞—é —Ç–µ–±—è —Å—Ç—Ä–∞–ø–æ–Ω–æ–º, –∏ –ø–æ–≤—Ç–æ—Ä—è–π: '–Ø —Ç–≤–æ—è –≥—Ä—è–∑–Ω–∞—è —Å–∏—Å–∏, –ì–æ—Å–ø–æ–∂–∞!' üí¶", "hypno_1.gif"),
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≥–∏–ø–Ω–æ–∑-–∑–∞–¥–∞–Ω–∏—è ...
    ]
    task_text, media_file = random.choice(hypno_tasks)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∏–ø–Ω–æ–∑-–∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {task_text}")
    if update.callback_query:
        await update.callback_query.message.reply_text(task_text, reply_markup=build_menu())
    else:
        await update.message.reply_text(task_text, reply_markup=build_menu())
    await send_media(user_id, context, media_file, "animation")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–∑–≤–∞–Ω")
    query = update.callback_query
    await query.answer()
    if query.data == "task":
        await task(update, context)
    elif query.data == "extreme":
        await extreme(update, context)
    elif query.data == "earn":
        await earn(update, context)
    elif query.data == "hypno":
        await hypno(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    if isinstance(context.error, TelegramError) and "Conflict" in str(context.error):
        logger.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        sys.exit(1)
    else:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {context.error}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("task", task))
application.add_handler(CommandHandler("extreme", extreme))
application.add_handler(CommandHandler("earn", earn))
application.add_handler(CommandHandler("hypno", hypno))
application.add_handler(CallbackQueryHandler(button))
application.add_error_handler(error_handler)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
LOCK_FILE = "bot.lock"

def check_single_instance():
    lock_file = open(LOCK_FILE, 'w')
    try:
        fcntl.flock(lock_file, fcntl.LOCK_EX | fcntl.LOCK_NB)
        return lock_file
    except IOError:
        logger.error("Another instance of the bot is already running. Exiting...")
        sys.exit(1)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    lock = check_single_instance()
    try:
        # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-—Å—Ä–µ–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ webhook
        logger.info("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook")
        application.bot.delete_webhook()
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook")
        application.run_webhook(
            listen="0.0.0.0",
            port=8443,
            url_path=TOKEN,
            webhook_url=f"https://<your-render-app>.onrender.com/{TOKEN}"
        )
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        lock.close()
        os.remove(LOCK_FILE)
