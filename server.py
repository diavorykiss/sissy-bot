import os
import logging
from flask import Flask, request
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from asgiref.wsgi import WsgiToAsgi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –∑–∞–¥–∞—ë—Ç–µ)
TOKEN = os.getenv("TELEGRAM_TOKEN", "7622812077:AAGz1Jiaq5IXdfyhqZO3i4aXeHs8EgCOksg")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application
application = Application.builder().token(TOKEN).build()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update, context):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏—è üìã", callback_data="tasks"),
            InlineKeyboardButton("–ì–∏–ø–Ω–æ–∑ üåÄ", callback_data="hypno"),
        ],
        [
            InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–∫–∏ üíé", callback_data="earn"),
            InlineKeyboardButton("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è üî•", callback_data="extreme"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        "–ù–∞ –∫–æ–ª–µ–Ω–∏, —Å–∏—Å–∏! üôá –Ø —Ç–≤–æ—è –ì–æ—Å–ø–æ–∂–∞, —Ç—ã –º–æ—è –∫—É–∫–ª–∞! –°–º–æ—Ç—Ä–∏ –Ω–∞ –º–µ–Ω—è –∏ –ø–æ–¥—á–∏–Ω—è–π—Å—è! üëë",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update, context):
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {query.data}")

    if query.data == "tasks":
        await query.message.reply_text("–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è, —Å–∏—Å–∏! –í—ã–ø–æ–ª–Ω—è–π! üìã")
    elif query.data == "hypno":
        await query.message.reply_text("–ü–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ –≥–∏–ø–Ω–æ–∑, —Å–∏—Å–∏... üåÄ")
    elif query.data == "earn":
        await query.message.reply_text("–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏, –º–æ—è –∫—É–∫–ª–∞! üíé")
    elif query.data == "extreme":
        await query.message.reply_text("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—è, —Å–∏—Å–∏! üî•")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(button))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application.initialize()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.before_first_request
async def set_webhook():
    webhook_url = f"https://sissy-bot.onrender.com/{TOKEN}"
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ {webhook_url}")
    await application.bot.set_webhook(webhook_url)

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞
@app.route(f"/{TOKEN}", methods=["POST"])
async def webhook():
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞")
    update = request.get_json()
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update['update_id']}")
    await application.process_update(update)
    return {"ok": True}

# –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.route("/")
def index():
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É /")
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"

# –û–±—ë—Ä—Ç–∫–∞ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ASGI
asgi_app = WsgiToAsgi(app)

if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
